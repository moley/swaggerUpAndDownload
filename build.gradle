buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE')
    }
}



plugins {
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile 'io.swagger:swagger-annotations:1.5.22'

    compile 'commons-io:commons-io:2.6'

    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'io.gsonfire:gson-fire:1.8.0'
    compile 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.1'
    compile 'org.threeten:threetenbp:1.3.5'

    swaggerCodegen 'org.openapitools:openapi-generator-cli:3.3.4'

    testCompile 'junit:junit:4.12'

}

springBoot {
    mainClassName = 'server.Application'
}

jar.dependsOn bootJar
jar.onlyIf {false}


bootRun {
    sourceResources sourceSets.main
    jvmArgs = ['-Ddemodata']
}

swaggerSources {
    exampleServer {
        inputFile = project.file('example.yaml')
        code {
            language = 'spring'
            components = ['models', 'apis', 'supportingFiles']
            additionalProperties = [interfaceOnly:'true', generateSupportingFiles: true]
            rawOptions = ['--api-package=server', '--model-package=server']
        }
    }

    exampleClient {
        inputFile = project.file('example.yaml')
        code {
            language = 'java'
            components = ['models', 'apis', 'supportingFiles']
            additionalProperties = [interfaceOnly:'true', generateSupportingFiles: true]
            rawOptions = ['--api-package=client', '--model-package=client']
        }
    }

}

sourceSets.main.java.srcDir "${swaggerSources.exampleServer.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.exampleServer.code.outputDir}/src/main/resources"
sourceSets.main.java.srcDir "${swaggerSources.exampleClient.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.exampleClient.code.outputDir}/src/main/resources"
tasks.compileJava.dependsOn tasks.generateSwaggerCode






